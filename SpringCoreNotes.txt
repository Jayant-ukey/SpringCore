	Topic 1. Spring IOC
------------------------

-> Jars need to create spring project : 1.Spring-core, 2.Spring-context.


Spring Framework - 1. Create objects for you. 2. Can manage objects for you.

How spring will do it?
- Spring have container for them. and all the objects that you create spring going to manage it for you. This conatiner contains the objects, and this objects that spring creates called as bean.
- So all the objects that spring creates and manages are called as spring beans.



config file : We have one config file where we mention all the classes whose object we want to create.
IOC Container : Spring has it own container called IOC containeer and it doesn't depends on anyone.
				Like JSP, servelt we need to deploy it on tomcat which is 3rd party. But for spring we don't need that.
				This container is going to create objects for whatever class you mention in the config file. and it going to manage it inside this container.
				
				
				
Q: If spring creates 3 objects A, B, C, and you want to create object of a then how will you do it?
Ans : Spring have one method called getBean(). This will help you to create object. Like getBean("A"). Same for B and C class object.


Q: If you want to make container then there are 2 types of IOC Container:
1. BeanFactory   2. ApplicationContext.
- Both BeanFactory and ApplicationContext are interface.
- For ApplicationContext interface there is implementation class is present named as ClassPathXmlApplicationContext.
- Inside ClassPathXmlApplicationContext we need to pass which config file we need to create. SO we need to pass it here.

Ex: ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
- We need to create config file here beans.xml in the class path. Otherwise there is need to pass full path.

------------------------------------

Config file- here beans.xml
- Inside bean tag we need to pass class and id. In class we need to provide fully qualified path, and we can access this class using id.
- So when conatiner create the object then we are going to track it using the id. whatever we provide in id will became reference. That's the use of id tag.
	If we pass id = student then it will become the reference internallly (Student student = new Student())
	
	
-----------------------------------

- Spring inversion of control
Ans : 1. Spring framework takes control and creates object for us. 2. Managing our objects. 3. Helping our application to be configurable. 4. Managing dependencies.


- What xsd and dtd do?
Ans: 1. It validates the tag for us. 
	 2. track the schema location or xsd or dtd and check tags are proper or not.
	 
	 
Spring IOC: IOC means Inversion of Control. It means, rather than we creating the java objects, spring will create the objects.
Spring Bean: In spring terminology, java object is called a bean. The java objects that are stored in container are called beans.


-----------------------------------

Things to remember while developement :-
1. xml file must be present in the resource folder (otherwise you need to provide fully qualified path) if you are making maven project.
2. Under bean tag provide path from folder name to class name in the given format :- com.springcore.selenium.Airtel

===============================================================================================================================================================


Topic 2: Dependency Injection
----------------------------
 
- Dependency injection is a way of passing the dependencies of an object to that object, rather than having the object create its own dependencies.
	Let's understand with the help of an example. Lets say we have a class Name as Me. and this Me class is dependent on many things like name, phoneNo, Family, House, Job, like that.
	SO we have a class where we declare all this variables, objects and collection.
	But we are not going to initialize it inside that class, as it will be consider as hard-coding.
	Spring will provide the facility that where we are going to initialize all this things and spring will take care that he will initialize all the things properly to that particular objects and variables.
 
- Dependenices can be in the form of 1. Literals 2. Object 3.Collection.

- There are 3 types of dependency injections:-
	1. Constructor Injection(E.g Pico Container, Spring supports it).
	2. Setter Injection(E.g Spring supports it).
	3. Interface Injection(E.g Avalon, Spring does not support it).
	
	Spring supports only constructor and setter based injection.


===============================================================================================================================================================


Topic 3: Setter and Constructor Injection


1. Setter Injection

- Lets take an example of Student class. This Student class have one dependency named as studentName, and having setter also inside that class.
- Now if you want to inject that dependency then we have property tag. Inside that property tag we need to provide name  and value for that particular dependency.

2. Constructor- Injection
- For constructor injection we use <constructor-args> tag.

Note: When you are passing integer value in the property or constructor tag then spring internally parse that value from String to int. So we don't need to 
	  take care of that. Otherwise you can explecitly passed type="int" like that.
	  for string type we need to use type = "java.lang.String" because String is a class.
	  
	  - In Spring 3 we can use name as a attribute where we can directly pass varaibale 
	  - But in our project we are using version 6. So we need to use index attribute. It doesn't support name attribute.


================================================================================================================================================================

Imp points to recap:

1. Bean tag :- It is used to create objects.

2. What does dependency means?
Ans: Whatever the variable or reference variable that we are making inside of a class are called as dependency.
	for ex- If we have student class then rollNo, name, Subjects(Class reference varaible) that will be ur dependencies.
	
3. proeprty tag : It is used to perform setter injection.

4. constructor-arg : It is used to perform constructor injection.

================================================================================================================================================================
30-07-24

Topic 4: Autowiring:

=>Autowiring means inject object dependencies automatically.
=>@Autowired is a mechanism by which Spring Boot automatically resolves and injects collaborating beans into your objects. 


- If in configuration file. If any class having dependency over other class. Then we are not setting the dependency explicitly by putting the property tag. We simply use autowire attribute inside bean tag.

example: 
	<beans>
		<bean id="heart" class="com.seleniumexpress.autowired.Heart" ></bean>

		<bean id="humanObj" class="com.seleniumexpress.autowired.Human" autowire="byName">
		
		</bean>
	</beans>

-------------------------------------------------------------------------

1. If we do autowire = "byName"
	Then Class reference variable name and bean id name need to match.
	

2. autowire="byTpe"
	The type of variable(Heart) and type of the bean(com.seleniumexpress.autowire.Heart) must matched.
	
3. autowire= "Constructor"
	-> For this we need to provide constructor injection. Then it's possible.

	
--------------------------------------------------------------------------

Pros and cons of autowire:

- If you have to many dependency let's say near about 50-100. It's good if we normally perform it. It will help you to debug easily.
- But if you have near about 5-10 dependencies then you can use autowiring concept.

--------------------------------------------------------------------------

Note: 
1. If your program don't have any constructor then JVM going to make constructor for you. But if you are using parameterized constructor in your program then you need to create default constructor. Here JVM will not create default constructor for you.

2. You can have constructor and setter both under one class. But which injection you want to perform it totally depends on you.

------------------------------------------------------------------------------
Autowired annotation

	
-> You can use Autowired annotation in front of setter or in front of constructor to perform that particular injection.
-> Autowired annotation is by-default inactivate we need to activate it using <context:annotation-config./> in the beans.xml file.

-> While performing constructor injection it is possible that it will not create the object for that particular bean. Because for object creation we need contructor like :
	Human human = new Human().
	Here Human() is a constructor.
	But while doing constructor injection we are overriding default constructor.
	If we overriding default constructor then JVM will not create default constructor for us. We need to create it by ouerself only.


-> If we want to perform setter injection then provide @Autowired annotation above setter method, for constructor injection put it above constructor.


Que: Autowiring is not possible for primitive or String type. Why?
Ans: How spring could know my data that I wanted to enter? eg: my rollNo, myName, etc..


Que: How @Autowired annotation works?
ans: 1. First it try to resolve with "byType".
	2. if byTyoe fails then it goes with "byName".
	

Que : Why there is need of @Qualifier annotation
Ans:  To specify for which bean we need to create object. for more see example -> Autowiring with qualifier annotation .

Que: Do we need to write setter/constructor if you are using @Autowired before the dependency?
Ans: No, it will work properly without setter and constructor if we are writing @AutoWired before dependecy.

Que: Then how it is working? How it is doing dependency injection?
Ans: 1.If match is found for what we pass in Qualifier annotation in the beans.xml file then it will directly create object and inject that to the dependency.

	-> In short Spring will directly create and inject your object to the match depndency. No setter required.


================================================================================================================================================================

1-08-24

Injecting literal values from properties file using spring annotations || @value || @Required


-> Since Spring 5.1, usage of @Required is deprecated, and you should instead just use constructor injection in place of setter injection if you have a required property.

You should use constructor injection for mandatory dependencies and setter injections for optional dependencies instead of field injection.
Some reasons why:
	It makes it clear to everybody which dependencies are required
	It makes testing easier
	You can make your objects immutable
	

-> If you are using @Value annotation before dependencies/data variables then you don't need setter or constructor.

-> To activate Value annotations or any annotation we need to have context path in configuration file and need to add tag (	<context:annotation-config />)
================================================================================================================================================================
05-08-24
Spring annotations


1. @Component: By using @Component annotation we can create a bean.
		-> @Componenet tag we can use with both. Means with xml file or with @Configuration annotation.
		-> Inside @Componenet annotation we need to pass bean id. This bean id get read through xml file only via <context:component-scan> tag where we passing the base package location.
		-> If we are using @Componenet annotation and didn't provide bean id inside @Component tag. Then by default it take the name of that class as bean id, with first letter of class as small letter.

2. @ComponenetScan: - It is mostly used with @Configration annotation. 
					- Like in beans.xml(Configuration file), we need to pass base package location. Like that we need to pass basepackages here. We can pass more than one base package.
					- This annotation is used to specify the packages that we want to be scanned.
					
3. @Configuration :- 
					@Configuration annotation indicates that a class declares one or more @Bean methods and may be processed by the Spring container to generate bean definitions and service requests for those beans at runtime. 
																		Or
					@Configuration annotation indicates that the class has @Bean definition methods. So Spring container can process the class and generate Spring Beans to be used in the application.
					
					
- There are 3 methods to create bean:
	1. Using bean tag in xml file.
	2. Using @Component annotation.
	3. Using @Bean annotation before method.
	
4. @Bean: This annotation is also used to create a bean.
			- By default bean name will be the method name above which we used Bean annotation.
			- If we want to give different name then we can pass name in bean annotation like - @Bean(name="beanName")
			- We can give multiple names also to the bean like @Bean(name = {"colBean", "AnotherCollegeBean"})
			
			
-> If we are using Bean annotation we use it before method and inside configuration class file. So it take care of creating object and injecting dependency.

-> Whereas if we are using @Componenet annotation then we need to use @Autowired annotation before dependency in order to inject that dependencies.

-> @Qualifier , @Primary annotations are used when we implements interface for multiple classes. 
	Primary annoattion is use to make that class as default, means if we forget then it will auomatically consider Primary class.
	Whereas Qualifier annotation is use to decide which class we need to call.

================================================================================================================================================================

27-08-24

Topic 8: Bean_Life_Cycle

Where beans are actually getting created?
- Beans are getting created inside the container, and a container is nothing but the ApplicationContext.

Step 1 : object created inside container.
- Inside container all the objects/beans that you are creating will be get maintained by Spring Framework. and the objects that spring framework maintains called as beans, and beans are actually inside the container.
- So it's the container responsibility that will create the object and that will manage the object inside itself.

Step 2: Dependency injected
- Next spring framework will inject all the dependency from the class to bean.

Step 3: Init method called
- Once it inject all the dependency, init method will get called.


------------------------------------------------
Different Ways of achieving bean-life-cycle

1. Using annotation:
@PostConstruct 
- Annotate a method with @PostConstruct it will act as init method.
- Once the object got created(Means all the dependency operation got performed) this init method get called, that's why the annotation name is @PostConstruct. Which means after construction of bean.

@PreDestroy
- to clean up unused reference we use this annotation. Example:- con.close()
- this destroy method will be called before the bean is removed from the container.

IMP: Remember that the destroy method will only be called once your container objet got destroyed/closed.
- Both @PostConstruct and @PreDestroy annotations are part of Java EE. And since Java EE has been deprecated in Java 9 and removed in Java 11 we have to add an additional dependency to use these annotations.

------------------------------------------------

Difference between standalone and web application.

- Here we are not dealing with any URL. So our applications are standalone application.

Standalone application:
//Creating container object manually 
ApplicationContext context = new ClassPathXmlApplicationContext();

// Destroying container object manually
context.close()


Web Application:
- You don't need to create and destroy the container object. This will be automatically done. 
- In web application it's not our responsibility to start and close the application context.


-> In a standalone application we can correctly stop/destroy the ApplicationContext by calling the close() or registerShutdownHook().

-> applicaionContext.close() will destroy the container object. But it will wait to run destroy() method, which is present in any of the bean (object).
So in our case first the destroy method which is present in StudentDao class will call first. then applicationContext.close() will close the connection.

----------------------------------------------------------------

1.b: Without using <context:annotation-config/>

- Without using <context:annotation-config/>, we can initialize CommonAnnotationBeanPostProcessor class to activate @PostConstruct/ @PreDestroy annotation.
- CommonAnnotationBeanPostProcessor is a class developed by spring programmer. This class comes free with your spring jars. You just need to instantiate it and use it. 
- This class is inside org.springframework.context.annotation package.


=================================================================================

2.Bean life-cycle with xml-configuration

2.a : init-method and destroy-method used to specify the lifecycle methods in xml.


*************
Interview Que :
1. What registerShutdownHook() does?
Ans: context.close() and registerShutdownHook() do the same work of closing the connection.
- But registerShutdownHook() will execute once the main thread() ends. SO once all your codes get executed, it will be called and close your container. *So it won't give us any exception irrespective of the line no we are calling it*.
- Whereas if we call context.close() it will close the container where we call this line, and after this line if we try to access the container it may throw an exception.


2. WHat is AbstractApplicationContext
Ans: It is the Abstract class which implements the ApplicationCOntext interface.
- We can create container using this class also, like:
AbstratcApplicationContext context = new ClassPathXmlApplicationContext("beans.xml")


Problem: WHat if the multiple classes in our project contains init and desroy mehods?
	We need to define init and destroy for each bean? (100 times for 100 beans?)
Sol : By passing default-init-method and default-destroy-method inside main beans tag we can achieve it.


Imp: -Life cycle methods are also called as call back methods as these methods are automatically called by the framework.
	- There are 3 ways to configure life cycle methods in spring 
	1. Annotation Approach
	2. XML Approach
	3. By implementing interface approach.
	- Implementing interface approach is mostly not recommended. Lets learn it for understanding purpose.


=================================================================================

3. Bean life cycle using interface appraoch:

- For this appraoch we need to implement 2 interface InitializingBean, DisposableBean.
- InitializingBean interface having one init method named as afterPropertiesSet that we need to override.
- and DisposableBean implement having destroy method.

